[gd_scene load_steps=10 format=2]

[ext_resource path="res://scenes/world.tscn" type="PackedScene" id=1]
[ext_resource path="res://materials/static_post_process/post_process.tres" type="Material" id=2]
[ext_resource path="res://assets/main_theme.tres" type="Theme" id=3]
[ext_resource path="res://objects/pause_menu/pause_menu.gd" type="Script" id=4]
[ext_resource path="res://game_env.tres" type="Environment" id=5]

[sub_resource type="World" id=4]
environment = ExtResource( 5 )

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float blur_strength = 8.0;
uniform int blur_iterations = 16;
uniform int blur_quality = 4;

uniform vec4 tint: hint_color = vec4(1);

vec4 texture_xorgaussian(sampler2D tex, vec2 uv, vec2 pixel_size, float blurriness, int iterations, int quality){
	float pi = 6.28;
	
	vec2 radius = blurriness / (1.0 / pixel_size).xy;
	vec4 blurred_tex = texture(tex, uv);
	
	for(float d = 0.0; d < pi; d += pi / float(iterations)){
		for( float i = 1.0 / float(quality); i <= 1.0; i += 1.0 / float(quality) ){
			vec2 directions = uv + vec2(cos(d), sin(d)) * radius * i;
			blurred_tex += texture(tex, directions);
		}
	}
	blurred_tex /= float(quality) * float(iterations) + 1.0;
	
	return blurred_tex;
}

vec4 blur(sampler2D source, vec2 uv, vec2 pixel_size){
	vec4 sum = vec4(0);
	
	sum += texture(source, uv + vec2(pixel_size.x *  1.0, pixel_size.y *  1.0));
	sum += texture(source, uv + vec2(pixel_size.x *  0.0, pixel_size.y *  1.0));
	sum += texture(source, uv + vec2(pixel_size.x * -1.0, pixel_size.y *  1.0));

	sum += texture(source, uv + vec2(pixel_size.x *  1.0, pixel_size.y *  0.0));
	sum += texture(source, uv + vec2(pixel_size.x *  0.0, pixel_size.y *  0.0));
	sum += texture(source, uv + vec2(pixel_size.x * -1.0, pixel_size.y *  0.0));

	sum += texture(source, uv + vec2(pixel_size.x *  1.0, pixel_size.y * -1.0));
	sum += texture(source, uv + vec2(pixel_size.x *  0.0, pixel_size.y * -1.0));
	sum += texture(source, uv + vec2(pixel_size.x * -1.0, pixel_size.y * -1.0));
	
	return sum / 9.0;
}

void fragment(){
	COLOR = tint * texture_xorgaussian(SCREEN_TEXTURE, SCREEN_UV, SCREEN_PIXEL_SIZE, blur_strength, blur_iterations, blur_quality);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/blur_strength = 16.0
shader_param/blur_iterations = 12
shader_param/blur_quality = 4
shader_param/tint = Color( 0.298039, 0.298039, 0.298039, 1 )

[sub_resource type="StyleBoxFlat" id=3]
bg_color = Color( 1, 1, 1, 1 )

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
theme = ExtResource( 3 )

[node name="StaticEffect" type="ViewportContainer" parent="."]
material = ExtResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
stretch = true

[node name="Viewport" type="Viewport" parent="StaticEffect"]
size = Vector2( 1024, 600 )
world = SubResource( 4 )
handle_input_locally = false
render_target_update_mode = 3

[node name="Spatial" parent="StaticEffect/Viewport" instance=ExtResource( 1 )]

[node name="UI" type="Control" parent="."]
pause_mode = 2
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Margin" type="MarginContainer" parent="UI"]
anchor_right = 1.0
anchor_bottom = 1.0
custom_constants/margin_right = 10
custom_constants/margin_top = 10
custom_constants/margin_left = 10
custom_constants/margin_bottom = 10

[node name="HUD" type="Control" parent="UI/Margin"]
margin_left = 10.0
margin_top = 10.0
margin_right = 1014.0
margin_bottom = 590.0

[node name="PauseMenu" type="Panel" parent="UI"]
visible = false
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
custom_styles/panel = SubResource( 3 )
script = ExtResource( 4 )

[node name="Label" type="Label" parent="UI/PauseMenu"]
margin_left = 10.0
margin_top = 10.0
margin_right = 1034.0
margin_bottom = 46.0
text = "Press F12 to toggle fullscreen"

[node name="RestartButton" type="Button" parent="UI/PauseMenu"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -76.5
margin_top = -21.0
margin_right = 76.5
margin_bottom = 21.0
text = "Restart"

[connection signal="pressed" from="UI/PauseMenu/RestartButton" to="UI/PauseMenu" method="_on_Restart_pressed"]
